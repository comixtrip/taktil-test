/**
 * Simple logger implementation including integration with the Bitwig
 * API's preferences system for setting log level, log filtering via
 * regular expressions, and Midi I/O filtering.
 */
var Logger = /** @class */ (function () {
    function Logger(session) {
        var _this = this;
        this._levels = ['ERROR', 'WARN', 'INFO', 'DEBUG'];
        this._initQueue = [];
        this._flushed = false;
        session.on('init', function () {
            host
                .getPreferences()
                .getEnumSetting('Log Midi', 'Development', ['None', 'Input', 'Output', 'Both'], 'None')
                .addValueObserver(function (midiLevel) {
                _this._midiLevel = midiLevel;
                if (_this._ready && !_this._flushed)
                    _this._flushQueue();
            });
            _this._levelSetting = host
                .getPreferences()
                .getEnumSetting('Log Level', 'Development', _this._levels, 'ERROR');
            _this._levelSetting.addValueObserver(function (level) {
                _this._level = level;
                if (_this._ready && !_this._flushed)
                    _this._flushQueue();
            });
            _this._filterSetting = host
                .getPreferences()
                .getStringSetting('Log filter (Regex)', 'Development', 1000, '');
            _this._filterSetting.addValueObserver(function (value) {
                _this._filter = value;
                if (_this._filter) {
                    var message = " Log filter regex set to \"" + value + "\"";
                    _this.log("\u256D\u2500\u2500\u2500\u252C" + '─'.repeat(message.length) + "\u256E");
                    _this.log("\u2502 i \u2502" + message + '│'); // prettier-ignore
                    _this.log("\u2570\u2500\u2500\u2500\u2534" + '─'.repeat(message.length) + "\u256F");
                }
                if (_this._ready && !_this._flushed)
                    _this._flushQueue();
            });
        });
    }
    Object.defineProperty(Logger.prototype, "_ready", {
        get: function () {
            return (this._filter !== undefined && this._level !== undefined && this._midiLevel !== undefined);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "level", {
        get: function () {
            return this._level;
        },
        set: function (level) {
            if (this._levelSetting !== undefined) {
                this._levelSetting.set(level);
            }
            else {
                this._level = level;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "filter", {
        get: function () {
            return this._filter;
        },
        set: function (value) {
            if (this._filterSetting !== undefined) {
                this._filterSetting.set(value);
            }
            else {
                this._filter = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Logger.prototype.log = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        this._log.apply(this, [null].concat(messages));
    };
    Logger.prototype.error = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        this._log.apply(this, ['ERROR'].concat(messages));
    };
    Logger.prototype.warn = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        this._log.apply(this, ['WARN'].concat(messages));
    };
    Logger.prototype.info = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        this._log.apply(this, ['INFO'].concat(messages));
    };
    Logger.prototype.debug = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        this._log.apply(this, ['DEBUG'].concat(messages));
    };
    Logger.prototype._log = function (level) {
        var messages = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            messages[_i - 1] = arguments[_i];
        }
        if (!this._ready) {
            this._initQueue.push([level, messages]);
            return;
        }
        if (level && this._levels.indexOf(level) > this._levels.indexOf(this._level))
            return;
        var message = "" + (level ? "[" + level.toUpperCase() + "] " : '') + messages.join(' ');
        if (level && this._filter) {
            var re = new RegExp(this._filter, 'gi');
            if (!re.test(message))
                return;
        }
        var isMidiInput = new RegExp('^\\[(MIDI|SYSEX)\\] ? IN', 'gi').test(message);
        var isMidiOutput = new RegExp('^\\[(MIDI|SYSEX)\\] ? OUT', 'gi').test(message);
        if (this._midiLevel === 'None' && (isMidiInput || isMidiOutput))
            return;
        if (this._midiLevel === 'Input' && isMidiOutput)
            return;
        if (this._midiLevel === 'Output' && isMidiInput)
            return;
        level === 'ERROR' ? host.errorln(message) : host.println(message);
    };
    Logger.prototype._flushQueue = function () {
        while (this._initQueue.length > 0) {
            var _a = this._initQueue.shift(), level = _a[0], messages = _a[1];
            this._log.apply(this, [level].concat(messages));
        }
        this._flushed = true;
    };
    return Logger;
}());
export { Logger };
