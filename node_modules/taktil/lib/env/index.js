import { Logger } from './Logger';
import { DelayedTask } from './DelayedTask';
// setup global env
export var shim = function (session) {
    var global = Function('return this')() || (42, eval)('this');
    if (!global.host)
        return;
    // specific env setup for bitwig environment
    // shim Timeout and Interval methods using DelayedTask class
    global.setTimeout = function setTimeout(callback, delay) {
        if (delay === void 0) { delay = 0; }
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            params[_i - 2] = arguments[_i];
        }
        return (_a = new DelayedTask(callback, delay)).start.apply(_a, params);
        var _a;
    };
    global.clearTimeout = function clearTimeout(timeout) {
        if (timeout)
            timeout.cancel();
    };
    global.setInterval = function setInterval(callback, delay) {
        if (delay === void 0) { delay = 0; }
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            params[_i - 2] = arguments[_i];
        }
        return (_a = new DelayedTask(callback, delay, true)).start.apply(_a, params);
        var _a;
    };
    global.clearInterval = function clearInterval(interval) {
        if (interval)
            interval.cancel();
    };
    // shim console with custom logger
    global.console = new Logger(session);
    // hookup dummy function to unsupported logger methods
    // Console-polyfill. MIT license.
    // https://github.com/paulmillr/console-polyfill
    // Make it safe to do console.log() always.
    var con = global.console;
    var prop;
    var method;
    var dummy = function () { };
    var properties = ['memory'];
    var methods = [
        'assert',
        'clear',
        'count',
        'debug',
        'dir',
        'dirxml',
        'error',
        'exception',
        'group',
        'groupCollapsed',
        'groupEnd',
        'info',
        'log',
        'markTimeline',
        'profile',
        'profiles',
        'profileEnd',
        'show',
        'table',
        'time',
        'timeEnd',
        'timeline',
        'timelineEnd',
        'timeStamp',
        'trace',
        'warn',
    ];
    while ((prop = properties.pop()))
        if (!con[prop])
            con[prop] = {};
    while ((method = methods.pop()))
        if (typeof con[method] !== 'function')
            con[method] = dummy;
};
