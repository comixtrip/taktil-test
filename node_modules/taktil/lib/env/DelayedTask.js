var DelayedTask = /** @class */ (function () {
    function DelayedTask(callback, delay, repeat) {
        if (delay === void 0) { delay = 0; }
        if (repeat === void 0) { repeat = false; }
        this.cancelled = false;
        this.callback = callback;
        this.delay = delay;
        this.repeat = repeat;
    }
    DelayedTask.prototype.start = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        host.scheduleTask(function () {
            if (!_this.cancelled) {
                _this.callback.call(args);
                if (_this.repeat)
                    _this.start.apply(_this, args);
            }
        }, this.delay);
        return this;
    };
    DelayedTask.prototype.cancel = function () {
        this.cancelled = true;
        return this;
    };
    return DelayedTask;
}());
export { DelayedTask };
