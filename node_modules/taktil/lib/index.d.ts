import { Control, ControlState } from './control';
import { View } from './view';
import { Session } from './session';
export declare const session: Session;
/**
 * Register controls to the session (can only be called once).
 *
 * @param controls The mapping of control labels to control instances to register
 * to the session.
 */
export declare function registerControls(controls: {
    [label: string]: Control;
}): void;
/**
 * Get the mapping of control labels to control instances that have
 * been registered to the session.
 */
export declare function getControls(): {
    [x: string]: Control<ControlState>;
};
/** Force re-render all registered controls. */
export declare function resetControls(): void;
/**
 * Register views to the session (can only be called once).
 *
 * @param views The mapping of view labels to view classes to register
 * to the session.
 */
export declare function registerViews(views: {
    [label: string]: typeof View;
}): void;
/**
 * Get the mapping of view labels to view classes that have been
 * registered to the session.
 */
export declare function getViews(): {
    [x: string]: typeof View;
};
/** Get the active view of the session. */
export declare function getActiveView(): typeof View;
/** Set the active view of the session. */
export declare function activateView(label: string): void;
/**
 * Get the list of active modes in the order they were activated,
 * from last to first.
 */
export declare function getActiveModes(): string[];
/** Activate a mode, adding it to the active mode list. */
export declare function activateMode(mode: string): void;
/** Deactivate a given mode, removing it from the active mode list. */
export declare function deactivateMode(mode: string): void;
/** Check if a given mode is active. */
export declare function modeIsActive(mode: string): boolean;
export declare function on(label: 'activateMode' | 'deactivateMode', callback: (mode: string) => void): void;
export declare function on(label: 'activateView', callback: (view: typeof View) => void): void;
export declare function on(label: 'init' | 'registerControls' | 'registerViews' | 'flush' | 'exit', callback: () => void): void;
export * from './component';
export * from './control';
export * from './helpers';
export * from './midi';
export * from './view';
