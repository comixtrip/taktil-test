import * as tslib_1 from "tslib";
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        this.listeners = {};
    }
    EventEmitter.prototype.on = function (label, callback) {
        if (this.listeners[label] && this.listeners[label].indexOf(callback) > -1) {
            throw new Error('Duplicate event subscriptions not allowed');
        }
        this.listeners = tslib_1.__assign({}, this.listeners, (_a = {}, _a[label] = (this.listeners[label] || []).concat([callback]), _a));
        var _a;
    };
    EventEmitter.prototype.addListener = function (label, callback) {
        this.on(label, callback);
    };
    EventEmitter.prototype.removeListener = function (label, callback) {
        var listeners = this.listeners[label];
        var index = listeners ? listeners.indexOf(callback) : -1;
        if (index > -1) {
            this.listeners = tslib_1.__assign({}, this.listeners, (_a = {}, _a[label] = listeners.slice(0, index).concat(listeners.slice(index + 1)), _a));
            return true;
        }
        return false;
        var _a;
    };
    EventEmitter.prototype.emit = function (label) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var listeners = this.listeners[label];
        if (listeners && listeners.length) {
            listeners.forEach(function (listener) {
                listener.apply(void 0, args);
            });
            return true;
        }
        return false;
    };
    return EventEmitter;
}());
export { EventEmitter };
