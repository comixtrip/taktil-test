import * as tslib_1 from "tslib";
import { Control } from './Control';
import { MidiMessage } from '../midi';
var ChannelPressure = /** @class */ (function (_super) {
    tslib_1.__extends(ChannelPressure, _super);
    function ChannelPressure(_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, channel = _a.channel, rest = tslib_1.__rest(_a, ["port", "channel"]);
        var _this = _super.call(this, tslib_1.__assign({ patterns: [{ port: port, status: 0xd0 | channel }] }, rest)) || this;
        _this.enableMidiOut = false;
        return _this;
    }
    ChannelPressure.prototype.getControlInput = function (_a) {
        var data1 = _a.data1;
        return tslib_1.__assign({}, this.state, { value: data1 }); // TODO: should be able to remove type casting in future typescript release
    };
    ChannelPressure.prototype.getMidiOutput = function (_a) {
        var value = _a.value;
        var _b = this, port = _b.port, status = _b.status;
        return [new MidiMessage({ port: port, status: status, data1: value, data2: 0 })];
    };
    return ChannelPressure;
}(Control));
export { ChannelPressure };
