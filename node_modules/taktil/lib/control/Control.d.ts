import { MidiMessage, SimpleMidiMessage, SysexMessage, MessagePattern } from '../midi/';
import { Component } from '../component';
import { Color } from '../helpers';
import { Session } from '../session';
export interface ControlState {
    value: number;
    color?: Color;
    brightness?: number;
    flashing?: boolean | {
        on: boolean;
        type?: 'sync' | 'free';
        rate?: number;
    };
    [key: string]: any;
}
/**
 * Abstract class defining the the base functionality from which all
 * other controls must extend.
 */
export declare class Control<State extends ControlState = ControlState> {
    label: string;
    session: Session;
    patterns: MessagePattern[];
    port?: number;
    status?: number;
    data1?: number;
    data2?: number;
    minValue: number;
    maxValue: number;
    enableMidiOut: boolean;
    enableCache: boolean;
    cacheOnMidiIn: boolean;
    state: State;
    protected cache: string[];
    private _defaultState;
    private _activeComponent;
    constructor({patterns, minValue, maxValue, enableMidiOut, enableCache, cacheOnMidiIn}: {
        patterns: (string | Partial<SimpleMidiMessage> | MessagePattern)[];
        minValue?: number;
        maxValue?: number;
        enableMidiOut?: boolean;
        enableCache?: boolean;
        cacheOnMidiIn?: boolean;
    });
    readonly valueRange: number;
    readonly defaultState: State;
    setState(partialState: Partial<State>, render?: boolean): void;
    activeComponent: Component | null;
    getControlInput(message: MidiMessage | SysexMessage): State;
    cacheMidiMessage(midiMessage: MidiMessage): boolean;
    onMidiInput(message: MidiMessage | SysexMessage): void;
    getMidiOutput(state: State): (MidiMessage | SysexMessage)[];
    controlWillRender?(messages: (MidiMessage | SysexMessage)[]): void;
    render(force?: boolean): boolean;
    controlDidRender?(messages: (MidiMessage | SysexMessage)[]): void;
}
