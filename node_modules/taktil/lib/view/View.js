import { Component } from '../component';
var View = /** @class */ (function () {
    // view should not be instantiated by user
    function View() {
    }
    View.getComponent = function (control, mode) {
        // check in current view
        if (this._componentMap[mode] !== undefined) {
            var componentMapIndex = this._componentMap[mode].controls.indexOf(control);
            if (componentMapIndex !== -1) {
                return this._componentMap[mode].components[componentMapIndex];
            }
        }
        // component not found in view? check in parents
        for (var _i = 0, _a = this.extends; _i < _a.length; _i++) {
            var ancestor = _a[_i];
            var component = ancestor.getComponent(control, mode);
            if (component)
                return component;
        }
        // not in current view, no parent to check? return null
        return null;
    };
    View.connectControl = function (control) {
        // check view modes in order for component/control registration
        var component = null;
        for (var _i = 0, _a = this.session.activeModes; _i < _a.length; _i++) {
            var activeMode = _a[_i];
            component = this.getComponent(control, activeMode);
            // if component is not null, we're done looking
            if (component)
                break;
        }
        // only set the component when it has changed
        if (control.activeComponent !== component)
            control.activeComponent = component;
    };
    View.init = function (session) {
        var _this = this;
        // connect the session
        this.session = session;
        // instance gives us component mapping
        var instance = new this();
        // give each subclass its own componentMap
        this._componentMap = {};
        Object.getOwnPropertyNames(instance).map(function (key) {
            var value = instance[key];
            value = typeof value === 'function' ? value() : value;
            var components = value instanceof Array ? value : [value];
            for (var i = 0; i < components.length; i += 1) {
                var component = components[i];
                var isSingleComponent = components.length === 1;
                // skip non-component properties
                if (component instanceof Component === false)
                    continue;
                // set component label and view
                component.label = isSingleComponent ? key : key + "[" + i + "]";
                // register components and controls in view
                var control = component.control, mode = component.params.mode;
                // register control with view/mode
                if (!_this._componentMap[mode])
                    _this._componentMap[mode] = {
                        controls: [],
                        components: [],
                    };
                // if control already registered in view mode, throw error
                if (_this._componentMap[mode].controls.indexOf(control) > -1)
                    throw Error("Duplicate Control \"" + control.label + "\" registration in view mode.");
                // add control and component pair to component map
                _this._componentMap[mode].controls.push(control);
                _this._componentMap[mode].components.push(component);
                // initialize component
                if (component.onInit)
                    component.onInit();
            }
        });
    };
    View.extends = [];
    return View;
}());
export { View };
