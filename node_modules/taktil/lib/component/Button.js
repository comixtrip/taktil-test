import * as tslib_1 from "tslib";
import { Component } from './Component';
/**
 * A button component providing method hooks for press, long press,
 * double press, release, and double release events.
 */
var Button = /** @class */ (function (_super) {
    tslib_1.__extends(Button, _super);
    function Button() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { on: false };
        _this.memory = {};
        _this.LONG_PRESS_DELAY = 350;
        _this.DOUBLE_PRESS_DELAY = 350;
        return _this;
    }
    Button.prototype.onControlInput = function (input) {
        if (this.onPress)
            this.handlePress(input.value);
        if (this.onLongPress)
            this.handleLongPress(input.value);
        if (this.onDoublePress)
            this.handleDoublePress(input.value);
        if (this.onRelease)
            this.handleRelease(input.value);
        if (this.onDoubleRelease)
            this.handleDoubleRelease(input.value);
    };
    Button.prototype.getControlOutput = function () {
        var _a = this.state, on = _a.on, color = _a.color;
        return tslib_1.__assign({ value: on ? this.control.maxValue : this.control.minValue }, (color && { color: color }));
    };
    Button.prototype.isPress = function (value) {
        return value > this.control.minValue;
    };
    Button.prototype.isRelease = function (value) {
        return value === this.control.minValue;
    };
    Button.prototype.isDoublePress = function (value) {
        return this.memory['doublePress'] && this.isPress(value);
    };
    Button.prototype.isDoubleRelease = function (value) {
        return this.memory['doubleRelease'] && this.isRelease(value);
    };
    Button.prototype.handlePress = function (value) {
        // if it's not a press or is a doublePress, ignore it
        if (!this.isPress(value) || this.memory['doublePress'])
            return;
        // handle single press
        if (this.onPress)
            this.onPress();
    };
    Button.prototype.handleDoublePress = function (value) {
        var _this = this;
        // if it's not a press or not implemented, ignore it
        if (!this.isPress(value))
            return;
        // if is doublePress
        if (this.isDoublePress(value)) {
            if (this.onDoublePress)
                this.onDoublePress();
        }
        else {
            // setup interval task to remove self after this.DOUBLE_PRESS_DELAY
            this.memory['doublePress'] = setTimeout(function () {
                delete _this.memory['doublePress'];
            }, this.DOUBLE_PRESS_DELAY);
        }
    };
    Button.prototype.handleLongPress = function (value) {
        var _this = this;
        // if it's a doublePress or is not implemented, ignore it
        if (this.isDoublePress(value))
            return;
        // if it's a press schedule the callback
        if (this.isPress(value)) {
            // schedule long press callback
            this.memory['longPress'] = setTimeout(function () {
                if (_this.onLongPress)
                    _this.onLongPress();
            }, this.LONG_PRESS_DELAY);
        }
        else if (this.memory['longPress']) {
            // cancel scheduled long press callback if button released too early
            clearTimeout(this.memory['longPress']);
            delete this.memory['longPress'];
        }
    };
    Button.prototype.handleRelease = function (value) {
        // if it's not a release, not implemented or is a doubleRelease, ignore it
        if (!this.isRelease(value) || this.memory['doubleRelease'])
            return;
        // handle single release
        if (this.onRelease)
            this.onRelease();
    };
    Button.prototype.handleDoubleRelease = function (value) {
        var _this = this;
        // if it's not a release or not implemented, ignore it
        if (!this.isRelease(value))
            return;
        // if is doubleRelease
        if (this.isDoubleRelease(value) && this.onDoubleRelease) {
            this.onDoubleRelease();
        }
        else {
            // setup timeout task to remove self after this.DOUBLE_PRESS_DELAY
            this.memory['doubleRelease'] = setTimeout(function () {
                delete _this.memory['doubleRelease'];
            }, this.DOUBLE_PRESS_DELAY);
        }
    };
    return Button;
}(Component));
export { Button };
