import * as tslib_1 from "tslib";
/**
 * Abstract class defining the the base functionality from which all
 * other components must extend.
 */
var Component = /** @class */ (function () {
    function Component(control, params) {
        this.params = {};
        this.state = {};
        this.control = control;
        this.params = tslib_1.__assign({}, this.params, params, { mode: params.mode || '__BASE__' });
    }
    Component.prototype.setState = function (partialState) {
        // update object state
        this.state = tslib_1.__assign({}, this.state, partialState); // TODO: should be able to remove type casting in future typescript release
        // re-render associated controls
        this.render();
    };
    Component.prototype.render = function () {
        // update hardware state if in view
        if (this.control.activeComponent === this)
            this.control.setState(this.getControlOutput());
    };
    return Component;
}());
export { Component };
