import { Control, ControlState } from '../control';
export interface ComponentState {
}
export interface ComponentParams {
}
/**
 * Abstract class defining the the base functionality from which all
 * other components must extend.
 */
export declare abstract class Component<Params extends ComponentParams = ComponentParams, State extends ComponentState = ComponentState> {
    label: string;
    control: Control;
    params: Params & {
        mode: string;
    };
    state: State;
    constructor(control: Control, params: Params & {
        mode?: string;
    });
    onInit?(): void;
    onActivate?(): void;
    onDeactivate?(): void;
    setState(partialState: Partial<State>): void;
    render(): void;
    abstract getControlOutput(): Partial<ControlState>;
    abstract onControlInput(input: ControlState): void;
}
