import * as tslib_1 from "tslib";
import { Component } from './Component';
var Range = /** @class */ (function (_super) {
    tslib_1.__extends(Range, _super);
    function Range() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.INPUT_DELAY = 350;
        _this.state = { value: 0 };
        _this.memory = {};
        return _this;
    }
    Range.prototype.render = function () {
        // if there is active input, don't call render
        if (!this.memory.input)
            _super.prototype.render.call(this);
    };
    Range.prototype.getControlOutput = function () {
        return { value: this.state.value };
    };
    Range.prototype.onControlInput = function (input) {
        var _this = this;
        // on input, start/restart input countdown timer to create input buffer time
        clearTimeout(this.memory.input);
        this.memory.input = setTimeout(function () { return delete _this.memory.input; }, this.INPUT_DELAY);
    };
    return Range;
}(Component));
export { Range };
