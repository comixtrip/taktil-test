var MidiMessage = /** @class */ (function () {
    function MidiMessage(_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, status = _a.status, data1 = _a.data1, data2 = _a.data2, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        this.port = port;
        this.status = status;
        this.data1 = data1;
        this.data2 = data2;
        this.urgent = urgent;
        this.hex = [port, status, data1, data2]
            .map(function (midiByte) {
            var hexByteString = midiByte.toString(16).toUpperCase();
            if (hexByteString.length === 1)
                hexByteString = "0" + hexByteString;
            return hexByteString;
        })
            .join('');
    }
    Object.defineProperty(MidiMessage.prototype, "shortHex", {
        get: function () {
            return this.hex.slice(2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "channel", {
        get: function () {
            return this.status & 0xf;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "pitchBendValue", {
        get: function () {
            return (this.data2 << 7) | this.data1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isNote", {
        get: function () {
            return (this.status & 0xf0) === 0x80 || (this.status & 0xf0) === 0x90;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isNoteOff", {
        get: function () {
            return (this.status & 0xf0) === 0x80 || ((this.status & 0xf0) === 0x90 && this.data2 === 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isNoteOn", {
        get: function () {
            return (this.status & 0xf0) === 0x90;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isKeyPressure", {
        get: function () {
            return (this.status & 0xf0) === 0xa0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isControlChange", {
        get: function () {
            return (this.status & 0xf0) === 0xb0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isProgramChange", {
        get: function () {
            return (this.status & 0xf0) === 0xc0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isChannelPressure", {
        get: function () {
            return (this.status & 0xf0) === 0xd0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isPitchBend", {
        get: function () {
            return (this.status & 0xf0) === 0xe0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isMTCQuarterFrame", {
        get: function () {
            return this.status === 0xf1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isSongPositionPointer", {
        get: function () {
            return this.status === 0xf2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isSongSelect", {
        get: function () {
            return this.status === 0xf3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isTuneRequest", {
        get: function () {
            return this.status === 0xf6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isTimingClock", {
        get: function () {
            return this.status === 0xf8;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isMIDIStart", {
        get: function () {
            return this.status === 0xfa;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isMIDIContinue", {
        get: function () {
            return this.status === 0xfb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isMidiStop", {
        get: function () {
            return this.status === 0xfc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isActiveSensing", {
        get: function () {
            return this.status === 0xfe;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MidiMessage.prototype, "isSystemReset", {
        get: function () {
            return this.status === 0xff;
        },
        enumerable: true,
        configurable: true
    });
    MidiMessage.prototype.toString = function () {
        return this.hex;
    };
    return MidiMessage;
}());
export { MidiMessage };
