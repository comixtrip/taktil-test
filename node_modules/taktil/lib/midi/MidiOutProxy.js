import { MidiMessage } from './MidiMessage';
var MidiOutProxy = /** @class */ (function () {
    function MidiOutProxy(session) {
        var _this = this;
        this._midiQueue = [];
        this._sysexQueue = [];
        session.on('flush', function () { return _this._flushQueues(); });
    }
    MidiOutProxy.prototype.sendMidi = function (_a) {
        var label = _a.label, _b = _a.port, port = _b === void 0 ? 0 : _b, status = _a.status, data1 = _a.data1, data2 = _a.data2, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        // if urgent, fire midi message immediately, otherwise queue it up for next flush
        if (urgent) {
            console.log("[MIDI]  OUT " + port + " <== " + new MidiMessage({ status: status, data1: data1, data2: data2 })
                .shortHex + (label ? " \"" + label + "\"" : ''));
            host.getMidiOutPort(port).sendMidi(status, data1, data2);
        }
        else {
            this._midiQueue.push({ label: label, port: port, status: status, data1: data1, data2: data2 });
        }
    };
    MidiOutProxy.prototype.sendSysex = function (_a) {
        var label = _a.label, _b = _a.port, port = _b === void 0 ? 0 : _b, data = _a.data, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        // if urgent, fire sysex immediately, otherwise queue it up for next flush
        if (urgent) {
            console.log("[SYSEX] OUT " + port + " <== " + data + (label ? " \"" + label + "\"" : ''));
            host.getMidiOutPort(port).sendSysex(data);
        }
        else {
            this._sysexQueue.push({ label: label, port: port, data: data });
        }
    };
    MidiOutProxy.prototype.sendNoteOn = function (_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, channel = _a.channel, key = _a.key, velocity = _a.velocity, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        this.sendMidi({ urgent: urgent, port: port, status: 0x90 | channel, data1: key, data2: velocity });
    };
    MidiOutProxy.prototype.sendNoteOff = function (_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, channel = _a.channel, key = _a.key, velocity = _a.velocity, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        this.sendMidi({ urgent: urgent, port: port, status: 0x80 | channel, data1: key, data2: velocity });
    };
    MidiOutProxy.prototype.sendKeyPressure = function (_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, channel = _a.channel, key = _a.key, pressure = _a.pressure, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        this.sendMidi({ urgent: urgent, port: port, status: 0xa0 | channel, data1: key, data2: pressure });
    };
    MidiOutProxy.prototype.sendControlChange = function (_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, channel = _a.channel, control = _a.control, value = _a.value, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        this.sendMidi({ urgent: urgent, port: port, status: 0xb0 | channel, data1: control, data2: value });
    };
    MidiOutProxy.prototype.sendProgramChange = function (_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, channel = _a.channel, program = _a.program, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        this.sendMidi({ urgent: urgent, port: port, status: 0xc0 | channel, data1: program, data2: 0 });
    };
    MidiOutProxy.prototype.sendChannelPressure = function (_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, channel = _a.channel, pressure = _a.pressure, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        this.sendMidi({ urgent: urgent, port: port, status: 0xd0 | channel, data1: pressure, data2: 0 });
    };
    MidiOutProxy.prototype.sendPitchBend = function (_a) {
        var _b = _a.port, port = _b === void 0 ? 0 : _b, channel = _a.channel, value = _a.value, _c = _a.urgent, urgent = _c === void 0 ? false : _c;
        this.sendMidi({
            urgent: urgent,
            port: port,
            status: 0xe0 | channel,
            data1: value & 0x7f,
            data2: (value >> 7) & 0x7f,
        });
    };
    // flush queued midi and sysex messages
    MidiOutProxy.prototype._flushQueues = function () {
        while (this._midiQueue.length > 0 || this._sysexQueue.length > 0) {
            var midiMessage = this._midiQueue.shift();
            if (midiMessage) {
                var label = midiMessage.label, port = midiMessage.port, status_1 = midiMessage.status, data1 = midiMessage.data1, data2 = midiMessage.data2;
                console.log("[MIDI]  OUT " + port + " <== " + new MidiMessage({ status: status_1, data1: data1, data2: data2 })
                    .shortHex + (label ? " \"" + label + "\"" : ''));
                host.getMidiOutPort(port).sendMidi(status_1, data1, data2);
            }
            var sysexMessage = this._sysexQueue.shift();
            if (sysexMessage) {
                var label = sysexMessage.label, port = sysexMessage.port, data = sysexMessage.data;
                console.log("[SYSEX] OUT " + port + " <== " + data + (label ? " \"" + label + "\"" : ''));
                host.getMidiOutPort(port).sendSysex(data);
            }
        }
    };
    return MidiOutProxy;
}());
export { MidiOutProxy };
