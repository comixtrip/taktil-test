import { SysexMessage } from './SysexMessage';
var MessagePattern = /** @class */ (function () {
    function MessagePattern(input) {
        var string;
        if (typeof input === 'string') {
            // handel string representation as input (e.g. '00B419??')
            string = input.length === 6 ? "00" + input : input;
            if (!/[a-fA-F0-9?]{8,}/.test(string))
                throw new Error("Invalid message pattern: \"" + input + "\"");
            string = string.toUpperCase();
            var message = MessagePattern.getMidiMessageFromPatternString(string);
            this.port = message.port;
            this.status = message.status;
            this.data1 = message.data1;
            this.data2 = message.data2;
        }
        else {
            // handle Partial<SimpleMidiMessage> as input
            string = MessagePattern.getPatternStringFromMidiMessage(input);
            this.port = input.port || 0;
            this.status = input.status;
            this.data1 = input.data1;
            this.data2 = input.data2;
        }
        this.string = string;
        this.regex = new RegExp("^" + string.slice().replace(/\?/g, '.') + "$");
    }
    MessagePattern.getPatternStringFromMidiMessage = function (_a) {
        var port = _a.port, status = _a.status, data1 = _a.data1, data2 = _a.data2;
        return [port, status, data1, data2]
            .map(function (midiByte) {
            if (midiByte === undefined)
                return '??';
            var hexByteString = midiByte.toString(16).toUpperCase();
            if (hexByteString.length === 1)
                hexByteString = "0" + hexByteString;
            return hexByteString;
        })
            .join('');
    };
    MessagePattern.getMidiMessageFromPatternString = function (pattern) {
        var string = pattern.length === 6 ? "??" + pattern : pattern;
        var _a = string.match(/.{1,2}/g).map(function (byte) { return (byte.indexOf('?') > -1 ? undefined : parseInt(byte, 16)); }), port = _a[0], status = _a[1], data1 = _a[2], data2 = _a[3];
        return { port: port, status: status, data1: data1, data2: data2 };
    };
    MessagePattern.prototype.toString = function () {
        return this.string;
    };
    MessagePattern.prototype.conflictsWith = function (pattern) {
        return this.regex.test(pattern.toString()) || pattern.regex.test(this.toString());
    };
    MessagePattern.prototype.test = function (message) {
        var testString = message instanceof SysexMessage
            ? message.data.toUpperCase()
            : MessagePattern.getPatternStringFromMidiMessage(message);
        return this.regex.test(testString);
    };
    return MessagePattern;
}());
export { MessagePattern };
